<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>kkren&#39;s blog</title>
  <icon>https://blog.kkren.me/images/avatar.png</icon>
  <subtitle>菜鸡的博客</subtitle>
  <link href="https://blog.kkren.me/atom.xml" rel="self"/>
  
  <link href="https://blog.kkren.me/"/>
  <updated>2020-11-10T11:40:04.093Z</updated>
  <id>https://blog.kkren.me/</id>
  
  <author>
    <name>kkren</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>自建 Tiny Tiny RSS 踩坑记录</title>
    <link href="https://blog.kkren.me/2020/11/selfhost-ttrss/"/>
    <id>https://blog.kkren.me/2020/11/selfhost-ttrss/</id>
    <published>2020-11-07T09:24:44.000Z</published>
    <updated>2020-11-10T11:40:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>在此之前，我一直使用 telegram 上的 <span class="exturl" data-url="aHR0cHM6Ly90Lm1lL1J1c3RSc3NCb3Q=">@RustRssBot<i class="fa fa-external-link-alt"></i></span> 来订阅 rss。使用 telegram 进行推送确实很爽，但是许多网站用此 bot 订阅时都会出现网络错误，而且我似乎也需要一款更专业的软件来阅读订阅。经过一番比较，我选择部署 Tiny Tiny RSS。</p><a id="more"></a><h2 id="部署">部署</h2><p>我使用的服务器是 <abbr title="Amazon web services">AWS</abbr> 位于俄勒冈的 lightsail 服务器，1 核 1g，Debian 10 系统。部署 <abbr title="Tiny Tiny RSS">TTRSS</abbr> 可以直接用 <a href="https://github.com/HenryQW/Awesome-TTRSS">Awesome-<abbr title="Tiny Tiny RSS">TTRSS</abbr></a> 这个项目提供的 docker-compose 文件。首先安装好 docker 和 docker-compose。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> https://github.com/HenryQW/Awesome-TTRSS/raw/master/docker-compose.yml<span class="token function">sudo</span> docker-compose up -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>需要注意的是这个 docker-compose.yml 文件目前有一点小问题。用于处理全文输出的 mercury 容器是无法连上外部网络的。因为在下面的 networks 中，service-only 这个 network 被设置为 internal<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>。将 <code>internal: true</code> 删除即可。</p><p>另外，TTRSS 容器内部有一个文件夹用于存放站点的 favicon，这个文件夹并没有被持久化，所以如果重新创建容器，就会丢失这些 favicon。需要等待 12 个小时才会重新刷新。我们可以创建一个 volume 来持久化这些 favicon。修改后的 docker-compose.yml 如下（部分 service 省去）：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">"3"</span><span class="token key atrule">services</span><span class="token punctuation">:</span>  <span class="token key atrule">service.rss</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wangqiru/ttrss<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> ttrss    <span class="token key atrule">ports</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> 181<span class="token punctuation">:</span><span class="token number">80</span>    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> SELF_URL_PATH=http<span class="token punctuation">:</span>//localhost<span class="token punctuation">:</span>181/ <span class="token comment"># please change to your own domain</span>      <span class="token punctuation">-</span> DB_PASS=ttrss <span class="token comment"># use the same password defined in `database.postgres`</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> feed<span class="token punctuation">-</span>icons<span class="token punctuation">:</span>/var/www/feed<span class="token punctuation">-</span>icons/    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> public_access      <span class="token punctuation">-</span> service_only      <span class="token punctuation">-</span> database_only    <span class="token key atrule">stdin_open</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">tty</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">service.mercury</span><span class="token punctuation">:</span> <span class="token comment"># set Mercury Parser API endpoint to `service.mercury:3000` on TTRSS plugin setting page</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> wangqiru/mercury<span class="token punctuation">-</span>parser<span class="token punctuation">-</span>api<span class="token punctuation">:</span>latest    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> mercury    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> service_only    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always  <span class="token key atrule">database.postgres</span><span class="token punctuation">:</span>    <span class="token key atrule">image</span><span class="token punctuation">:</span> postgres<span class="token punctuation">:</span>13<span class="token punctuation">-</span>alpine    <span class="token key atrule">container_name</span><span class="token punctuation">:</span> postgres    <span class="token key atrule">environment</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> POSTGRES_PASSWORD=ttrss <span class="token comment"># feel free to change the password</span>    <span class="token key atrule">volumes</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> ~/postgres/data/<span class="token punctuation">:</span>/var/lib/postgresql/data <span class="token comment"># persist postgres data to ~/postgres/data/ on the host</span>    <span class="token key atrule">networks</span><span class="token punctuation">:</span>      <span class="token punctuation">-</span> database_only    <span class="token key atrule">restart</span><span class="token punctuation">:</span> always<span class="token key atrule">networks</span><span class="token punctuation">:</span>  <span class="token key atrule">public_access</span><span class="token punctuation">:</span> <span class="token comment"># Provide the access for ttrss UI</span>  <span class="token key atrule">service_only</span><span class="token punctuation">:</span> <span class="token comment"># Provide the communication network between services only</span>  <span class="token key atrule">database_only</span><span class="token punctuation">:</span> <span class="token comment"># Provide the communication between ttrss and database only</span>    <span class="token key atrule">internal</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span class="token key atrule">volumes</span><span class="token punctuation">:</span>  feed<span class="token punctuation">-</span>icons<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>再次执行 <code>sudo docker-compose up -d</code> 来更新容器。部署完容器后还需要安装 nginx 来反代服务。nginx 的配置文件可以参考文档：<span class="exturl" data-url="aHR0cHM6Ly90dHJzcy5oZW5yeS53YW5nL3poLyMlRTklODUlOEQlRTclQkQlQUUtaHR0cHM=">配置 HTTPS<i class="fa fa-external-link-alt"></i></span> 。</p><h3 id="部署-RSSHub">部署 RSSHub</h3><p>是一个开源、简单易用、易于扩展的 RSS 生成器，可以给任何奇奇怪怪的内容生成 RSS 订阅源。虽然 RSSHub 有官方提供的服务，但是几乎无法爬取任何反爬严格的站点。自建 RSSHub 依然可以使用 docker-compose。参考官方的<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnJzc2h1Yi5hcHAvaW5zdGFsbC8jZG9ja2VyLWNvbXBvc2UtYnUtc2h1">部署文档<i class="fa fa-external-link-alt"></i></span>，可以快速启动一个 RSSHub 容器。注意，互联网 <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup> 上可能有人爬取自建的 RSSHub。推荐不将 RSSHub 暴露到公网，或者使用 http basic auth 来保护。TTRSS 支持在订阅时添加 http basic auth 的用户名与密码。</p><h3 id="插件">插件</h3><p>在 TTRSS 中，每个用户都可以独立配置插件，但是在 docker 的环境变量中可以全局开启特定插件</p><h4 id="mercury">mercury</h4><p>mercury 是一个用于全文输出订阅源的插件，使用下来效果还是很准确的。之前我们启动的容器中已经包含了 mercury 的容器。接下来只需要在<code>偏好设置 - mercury_fulltext</code> 启用插件即可。然后在<code>订阅源 - mercury fulltext settings</code> 中，填写 api 地址为 <code>service.mercury:3000</code>。还可以设置特定订阅源自动在收取时转换全文，在<code>编辑订阅源-插件</code>中启用即可。</p><h4 id="fever">fever</h4><p>许多第三方客户端都需要 fever api 的支持。在<code>偏好设置 - Fever Emulation</code> 中设置密码即可启用 fever。此密码可以与账户密码相同也可以不同。注意使用 fever api 不能编辑、添加订阅源，也不支持分类嵌套等功能。</p><h2 id="订阅源">订阅源</h2><p>我订阅的大部分订阅源都是来自于个人博客，基本上都直接提供订阅源并且全文输出。但是有部分国内的社区不提供订阅源，或者需要进一步自定义订阅源。除了使用 RSSHub 以外，另一个工具是 <span class="exturl" data-url="aHR0cHM6Ly9mZWVkNDMuY29tLw==">feed43<i class="fa fa-external-link-alt"></i></span>。通过这个网站提供的查找与替换工具，可以很轻松制作订阅源。我给触乐网的<span class="exturl" data-url="aHR0cDovL3d3dy5jaHVhcHAuY29tL3RhZy9pbmRleC9pZC8yMDM2OS5odG1s">触乐夜话<i class="fa fa-external-link-alt"></i></span>栏目制作了一个<span class="exturl" data-url="aHR0cHM6Ly9mZWVkNDMuY29tLzQ0NTg4ODIzMjIyNzQ0MDQueG1s">订阅源<i class="fa fa-external-link-alt"></i></span>。可惜 feed43 没法很方便的全文输出，但是用 TTRSS 的 mercury 插件全文输出的效果很不错。</p><h2 id="客户端">客户端</h2><h3 id="ios-macos">ios&amp;macos</h3><table><thead><tr><th>名称</th><th> api</th><th> 授权</th></tr></thead><tbody><tr><td><span class="exturl" data-url="aHR0cHM6Ly93d3cucmVlZGVyYXBwLmNvbS8="> Reader<i class="fa fa-external-link-alt"></i></span></td><td>Fever</td><td> 收费</td></tr></tbody></table><p>我没苹果设备，但是 Reader 看起来很好看。</p><h3 id="Android">Android</h3><table><thead><tr><th>名称</th><th> api</th><th> 授权</th></tr></thead><tbody><tr><td><span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5zZWF6b24uZmVlZG1l"> Feedme<i class="fa fa-external-link-alt"></i></span></td><td>Fever/<abbr title="Tiny Tiny RSS">TTRSS</abbr></td><td> 开源</td></tr><tr><td><span class="exturl" data-url="aHR0cHM6Ly9wbGF5Lmdvb2dsZS5jb20vc3RvcmUvYXBwcy9kZXRhaWxzP2lkPWNvbS5pc2FpYXNtYXRld29zLnJlYWRhYmx5"> Readably<i class="fa fa-external-link-alt"></i></span></td><td>Fever</td><td> 免费 / 内购</td></tr></tbody></table><p>Readably 看起来很好看，但是 Feedme 也不错而且更接近 Material Design。我选择了更简洁的 Readably。</p><img data-src="https://i.loli.net/2020/11/07/L9k5qO4uXletGgf.png" alt="Readably-screenshot" style="zoom:50%;"><h3 id="Windows">Windows</h3><table><thead><tr><th>名称</th><th> api</th><th> 授权</th></tr></thead><tbody><tr><td><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3lhbmc5OTExNzgvZmx1ZW50LXJlYWRlcg=="> Fluent Reader<i class="fa fa-external-link-alt"></i></span></td><td>Fever</td><td> 开源 / 收费</td></tr></tbody></table><p>Fluent Reader 是一个很新的 rss 客户端。在 Microsoft Store 上是收费的，但是在 Github release 上有免费的安装包。Fluent Reader 使用 electron+flutter 的技术，外观还是很不错的。阅读体验也很好。当然，除了客户端，在 Windows 上直接使用网页端的体验也很好。</p><img data-src="https://i.loli.net/2020/11/07/XIwMKuGlr7ytWhY.png" alt="Fluent Reader screenshot" style="zoom:50%;"><h2 id="结语">结语</h2><p>在 2020 年使用 rss 服务已经确实变得困难重重，rss 的概念也与移动互联网的概念有了很大的差别。但是我还是习惯于使用 rss 收取信息。另一方面，我希望支持还在写个人博客的作者。我的订阅源中主要都是个人博客，其中的很多作者后来都成为了我的朋友，或者从我的朋友那里了解到了他们的个人博客。非常感谢这些博客在我最早使用互联网的时候给我带来的帮助。</p><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>即使不设置 internal，容器也默认是不能从外部访问的，需要手动设置端口转发。 <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><span class="exturl" data-url="aHR0cHM6Ly93d3cudjJleC5jb20vdC82Mzk1MTI=">https://www.v2ex.com/t/639512<i class="fa fa-external-link-alt"></i></span> “V2EX - 用 RSS 订阅全平台的经历和体验” <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    
    <summary type="html">&lt;p&gt;在此之前，我一直使用 telegram 上的 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly90Lm1lL1J1c3RSc3NCb3Q=&quot;&gt;@RustRssBot&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 来订阅 rss。使用 telegram 进行推送确实很爽，但是许多网站用此 bot 订阅时都会出现网络错误，而且我似乎也需要一款更专业的软件来阅读订阅。经过一番比较，我选择部署 Tiny Tiny RSS。&lt;/p&gt;</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>XPS 15 杀手？ - Dell Inspiron 7591 体验报告 by kotomei</title>
    <link href="https://blog.kkren.me/2019/08/Dell-Inspiron-7591-review/"/>
    <id>https://blog.kkren.me/2019/08/Dell-Inspiron-7591-review/</id>
    <published>2019-08-03T02:37:32.000Z</published>
    <updated>2020-11-10T11:40:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>谈起 Dell，不少人想到的应该都是被称为超极本标杆的 XPS 系列。但其高贵的售价，只能让像我这样的穷人看着流口水。但在今年的 ComputeX 上，Dell 发布了一款被称作为穷人版 XPS 15 的 Inspiron 7590 ，对我来说终于找到了一款在各方面都没有明显短板的同时还「穷人友好」的笔记本。在准备入手时发现京东上 7590 的换壳减价版 7951 正在秒杀促销，Google 一番后发现二者除外壳材质外几乎毫无差别。于是为了钱包能更轻松些，我选择了 7951。事后证明这次痛快出手是个正确的决定。 <a id="more"></a><br><img data-src="https://i.loli.net/2019/07/09/5d236cb3c955866972.jpg" alt="Banner"></p><center><i>Dell 以高超的性价比，生动地演绎了什么是 Creator laptop。</i> </center>## 配置 - i5-9300H@2.4GHz，4C8T，最高可睿频至 4.1GHz - 单通道 8GB DDR4 2666MHz （可自行增加内存条升级为双通道） - 512G PCIe x2 SSD - GTX1650 4GB 显存版本 - 15.6 寸 1080P 60FPS IPS 屏幕，色域为 NTSC 72% 并支持 HDR - 97Wh 六芯电池 - IO 接口方面：     - 1 个 HDMI 2.0 接口     - 3 个 USB 3.1 Gen1 接口，均为 USB Type-A     - 1 个雷电三接口     - 1 个 MicroSD 读卡器（USB）     - 1 个耳机/麦克风二合一 3.5MM 接口 <h2 id="初步印象">初步印象</h2><p>京东的物流速度当然没得说，到手之后我也是第一时间在 Android Dress 群内进行了<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL0FuZHJvaWREcmVzcy84OTM3MTg=">图片直播开箱<i class="fa fa-external-link-alt"></i></span>。实测 1.9KG 的机身重量对于一台拥有 97Wh 的电池容量的设备可以说是十分惊喜了。银白色的机身可能不合有些人的口味，但对我来说完全 OK。</p><p>在随后的使用中发现笔记本后盖的左下和右下角未完全紧贴，当时认为是自己开启后盖安装内存条时由于力度过大导致后盖变形，所以并没有放在心上。然而在随后和其他几位 7951 买家沟通后发现有一部分人与我的情况一样，并且他们未开启过后盖。可能这次 Dell 的外壳设计有些问题。</p><p>另外，在上手 7591 后的几个小时内，我的手指被外壳割出了伤口，这也让我对「外壳割手」的认识又上了一个新的层次。</p><h2 id="外观">外观</h2><p><img data-src="https://i.loli.net/2019/07/08/5d22f5761830c81269.jpg" alt="A"></p><center>A 面，还是经典的 Dell 圆形 Logo</center><p><img data-src="https://i.loli.net/2019/07/08/5d22f57f3833679487.jpg" alt="BC.jpg"></p><center>B、C 面，可以看到键盘和机身是同样材质的金属键盘</center><p><img data-src="https://i.loli.net/2019/07/08/5d22f5785a3f971570.jpg" alt="D.jpg"></p><center> D 面，作为相对廉价的 Inspiron 产品线肯定没有和 XPS 那样「高贵」的「狗牌」</center><h2 id="性能">性能</h2><p>不多说，直接放跑分成绩。</p><p><strong>进行测试时由于控制变量并不严谨，本部分的成绩仅供参考。</strong></p><ul><li><p><span class="exturl" data-url="aHR0cHM6Ly93d3cuM2RtYXJrLmNvbS8zZG0vMzY4NDc4NjU=">3DMark 成绩<i class="fa fa-external-link-alt"></i></span></p></li><li><p>CineBench R20 成绩</p><p><img data-src="https://i.loli.net/2019/07/05/5d1f193e031f955529.jpg" alt="CineBench R20 成绩"></p></li><li><p>CineBench R15 成绩</p><p><img data-src="https://i.loli.net/2019/07/05/5d1f19ab97b0183232.jpg" alt=" CineBench R15 成绩"></p></li><li><p>在 AIDA 64 的系统稳定性测试下，CPU FPU 双烤一分半后 CPU 频率在 3GHz ± 0.05GHZ 浮动，CPU 单烤一分半时 CPU 频率稳定在 3.65GHz -+ 0.02GHz。</p></li></ul><p>值得一提的是，在更换原厂硅脂为信越 7921 之后，CPU 的性能相对于原厂硅脂又有了提升。</p><ul><li><p>更换硅脂后的 CineBench R20 成绩</p><p><img data-src="https://i.loli.net/2019/07/05/5d1f1aefce90758420.jpg" alt="更换硅脂后的 CineBench R20 成绩"></p></li><li><p>更换硅脂后的 AIDA 64 CPU FPU 双烤成绩</p></li></ul><p><img data-src="https://i.loli.net/2019/07/05/5d1f1b9ccca3c15200.jpg" alt="更换硅脂后的 AIDA 64 CPU FPU 双烤成绩"></p><ul><li>更换硅脂后的 AIDA 64 CPU 单烤成绩</li></ul><p><img data-src="https://i.loli.net/2019/07/05/5d1f1b699866790398.jpg" alt="更换硅脂后的 AIDA 64 CPU 单烤成绩"></p><h2 id="屏幕">屏幕</h2><p>这块 15.6 寸 1080P 60FPS 的屏幕没有什么特别出彩的点，72% NTSC 的色域对于一般人也已经完全可以满足日常的需求了，屏幕的可视角度也没有什么大问题。支持 HDR 视频播放可以让平时摸鱼看 NetFlix 的时候能更开心一些。总体而言算中规中矩。专业的客观数据测试截至目前（2019 年 7 月 5 日（CST））本人并未找到，所以这里也就不再给出了。</p><h2 id="可升级性">可升级性</h2><p>说起笔记本，也就不得不说可升级性了。拆开 D 面后你会看到一个空闲的 M.2 PCIe x4 2280 接口和一个 DDR4 SODIMM 接口，如果你购买的是 56Wh 电池版本，还会看到一个 2.5 寸硬盘槽位。对于可升级性来讲，这款笔记本算相对友好的了。值得一提的是，笔记本自带的 NVMe SSD 所安装的槽位是 2230/2242/2280 可调节的。另外一个雷电三接口也解决了不少扩展性与后期升级方面的问题。需要注意的是，笔记本自带的无线网卡所使用的是 Intel 新提出的 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL3N1cHBvcnQvYXJ0aWNsZXMvMDAwMDI2MTU1L25ldHdvcmstYW5kLWktby93aXJlbGVzcy1uZXR3b3JraW5nLmh0bWw=">CNVi 接口规范<i class="fa fa-external-link-alt"></i></span>，让部分想更换网卡安装 Hackintosh 的玩家工程量大大加大。唯一可行的方案是使用 2230/2242/2280 可调节的接口安装网卡，但同时也需要重新考虑天线在机身内部的走线问题。</p><h2 id="键盘">键盘</h2><p>这款笔记本所使用的键盘是小 Enter 小方向键布局（如 B、C 面图片所示），对于部分人来说可能需要一定的适应时间。总体而言，一旦上手，键盘的手感还是很舒服的。有小键盘的布局让一些数字处理会更轻松一些。唯一的缺点是这台电脑不支持 Windows Hello 生物信息识别。</p><h2 id="触控板">触控板</h2><p>在 2019 年，Windows Precision TouchPad 基本上是笔记本标配了，加上较大的尺寸让触控板体验也是很舒服的。但对于我来说，由于触控板的位置，在平时打字时时常会出现误触的情况。虽说影响不是很大但让我感觉还是很难受。在 Windows 设置中讲触控板的灵敏度调整为低后误触情况相对改善不少。</p><h2 id="IO-接口">IO 接口</h2><p>这台笔记本给了三个 Type-A 接口，让你不必成为 Dongle Man，一个雷电三接口也为未来留好了扩展性。唯一的缺点就是这台笔记本给的是 MicroSD 卡读卡器而不是 SD 卡读卡器，不过对于我来说问题不是很大。</p><h2 id="音响">音响</h2><p>由于平时主要是使用耳机，再加上是一双木耳朵。所以这里也不做过多评价。</p><h2 id="一点后话">一点后话</h2><p>被朋友笑称为「全都不能本」的 Dell Inspiron 7590/7591 ，反而在京东上销量火爆，基本上是一上货就被抢光的状态。也许在 6000-8000 元价位的这款笔记本，正好命中了不少人的 Sweet spot 。结合今年 Intel 在 ComputeX 所提出的 Creator laptop 这一概念，Dell Inspiron 7590/7591 可以说是 Dell 交出的一份对 Creator laptop 这一概念的答卷。相对比更高端的 10000 元价位的超极本更亲民的价格，和比同 6000-8000 元价位的竞品相对更强劲的性能，让与我一样对性能有所要求但预算受限的人有了更好的选择。在 Dell 的 Inspiron 7951 产品信息页也可以看到 Dell 是有计划推出 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGVsbC5jb20vc3VwcG9ydC9tYW51YWxzL2NuL3poL2NuYnNkMS9pbnNwaXJvbi0xNS03NTkxLWxhcHRvcC9pbnNwaXJvbi03NTkxLXNldHVwLWFuZC1zcGVjaWZpY2F0aW9ucy8lRTUlQTQlODQlRTclOTAlODYlRTUlOTklQTg/Z3VpZD1ndWlkLWJmYTUyZjQwLThhZDEtNGRmMC04ZDBmLTk0Mjc2NmJjMjExOCZhbXA7bGFuZz16aC1jbg==">i9 机型<i class="fa fa-external-link-alt"></i></span> 与 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGVsbC5jb20vc3VwcG9ydC9tYW51YWxzL2NuL3poL2NuYnNkMS9pbnNwaXJvbi0xNS03NTkxLWxhcHRvcC9pbnNwaXJvbi03NTkxLXNldHVwLWFuZC1zcGVjaWZpY2F0aW9ucy8lRTYlOTglQkUlRTclQTQlQkElRTUlQjElOEY/Z3VpZD1ndWlkLWY1MDUxODNlLTNkMzgtNDgyMS04Mzc5LTE2OTJkNDcwNTIwNyZhbXA7bGFuZz16aC1jbg==">4K 分辨率 aRGB 100% 色域屏幕<i class="fa fa-external-link-alt"></i></span> 的版本。而相对更沉稳的外形也让人没有用游戏本时的那种尴尬。</p><p>综上，这款笔记本可能会是部分与我一样即将进入大学生活的学生和一些对性能有要求但预算又受限的创意工作者的首选。</p><p>本文最初发表于 Telegram 上的体验测评频道 <span class="exturl" data-url="aHR0cHM6Ly90Lm1lL3RzdUJlbmNoLzg4OA==">@tsuBench<i class="fa fa-external-link-alt"></i></span> 并以 CC 4.0-BY-NC-SA 方式分享。</p><p>tsuBench © 2019</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;谈起 Dell，不少人想到的应该都是被称为超极本标杆的 XPS 系列。但其高贵的售价，只能让像我这样的穷人看着流口水。但在今年的 ComputeX 上，Dell 发布了一款被称作为穷人版 XPS 15 的 Inspiron 7590 ，对我来说终于找到了一款在各方面都没有明显短板的同时还「穷人友好」的笔记本。在准备入手时发现京东上 7590 的换壳减价版 7951 正在秒杀促销，Google 一番后发现二者除外壳材质外几乎毫无差别。于是为了钱包能更轻松些，我选择了 7951。事后证明这次痛快出手是个正确的决定。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>Windows 字体渲染优化</title>
    <link href="https://blog.kkren.me/2019/03/improve-windows-font-rendering/"/>
    <id>https://blog.kkren.me/2019/03/improve-windows-font-rendering/</id>
    <published>2019-03-17T13:18:25.000Z</published>
    <updated>2020-11-10T11:40:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>从 2k 屏的 Surface book 换到 24 寸的 1080p Dell 屏，Windows 默认的字体渲染几乎不能忍。因为我很穷，买不起高分辨率的显示器，只好研究一些奇怪的方式来优化这电脑的使用体验。<a id="more"></a></p><h2 id="noMeiryoUI">noMeiryoUI</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RhdHN1LXN5by9ub01laXJ5b1VJLw==">noMeiryoUI<i class="fa fa-external-link-alt"></i></span> 是我第一个尝试的方案。它可以在不修改系统文件的前提下修改系统的字体。按照网上的推荐，我将字体改成了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JlNWludmlzL1NhcmFzYS1Hb3RoaWM=">更纱黑体<i class="fa fa-external-link-alt"></i></span>。效果还是有一点的，但是 Windows 字体最大的问题 —— 笔画的锯齿非常明显，并没有得到改善。</p><h2 id="Mactype">Mactype</h2><p>在沉寂了许久以后，最新的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nub3dpZTIwMDAvbWFjdHlwZS9yZWxlYXNlcy90YWcvMjAxOC4xLWJldGE1">MacType 2018.1-beta5<i class="fa fa-external-link-alt"></i></span> 已经大大改善了兼容性问题。现在 Mactype 已经可以支持包括 Chrome 在内的大多数 DirectWrite 程序。</p><p><img data-src="https://i.loli.net/2019/03/17/5c8e515376ea6.png" alt="Snipaste_2019-03-17_21-52-33.png"></p><p>Mactype 的加载方式，我选择的服务加载。第一次使用的时候可以使用托盘加载，没有问题再切换成其他模式。使用托盘加载时我有时会遇到 Chrome 不加载 Mactype 的问题，不知道是不是 bug。</p><p>Mactype 的配置推荐 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSmFtZXNpdHMvNmE1OGExYjA4ZDVjZDA5YTk0YTAyZjMwZGRhZjBlMTM=">James 大佬<i class="fa fa-external-link-alt"></i></span>的。我在他的配置上又做了一些修改。从 L324 到 L282 我全部注释了，因为加载这些进程在我这里没有遇到什么奇怪的问题，而且文件管理器毕竟还是经常要用到的。我也没有把 Chrome 中的雅黑替换成思源黑体，因为我也没有遇到奇怪的 bug。然后，在 Chrome 中用 XStyle 之类的插件加载这个 <span class="exturl" data-url="aHR0cHM6Ly91c2Vyc3R5bGVzLm9yZy9zdHlsZXMvMTU5NTQ5L3RoZW1l">CSS<i class="fa fa-external-link-alt"></i></span>。然后，[ExcludeSub] 中加入了 origin 和 uplay 的进程，这两个程序替换字体后图标都变成了方框。</p><h3 id="Exclude-呢？这个配置有什么用？">[Exclude] 呢？这个配置有什么用？</h3><p>答案就是没有用，作者在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nub3dpZTIwMDAvbWFjdHlwZS9pc3N1ZXMvMzMyI2lzc3VlY29tbWVudC0zMTM1NzI3MDY=">Issue<i class="fa fa-external-link-alt"></i></span> 中解释过了。</p><blockquote><p>[Exclude] - does not exist.</p></blockquote><h3 id="许多配置不生效？">许多配置不生效？</h3><p>很有可能是文件编码的问题。从 GitHub 上下载的文件默认是 UTF-8 编码，但是 Mactype 识别的是 GB 2312 编码。需要你自己用文本编辑器转换一下。</p><h3 id="效果">效果</h3><p><img data-src="https://i.loli.net/2019/03/17/5c8e567035bd6.png" alt="Snipaste_2019-03-17_22-15-04.png"></p><p>Mactype 的渲染策略大概是，当分辨率不足以清晰的渲染字体的时候，用一团灰色的东西来渲染对应的笔画，说的简单点就是抗锯齿。对于天天看中文的人来说，不用看清每一个笔画就能看懂对应的字，而且这应该是分辨率不足的情况下最大程度模仿印刷效果的方式，比微软选择的 Hinting 好很多（大概）。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;从 2k 屏的 Surface book 换到 24 寸的 1080p Dell 屏，Windows 默认的字体渲染几乎不能忍。因为我很穷，买不起高分辨率的显示器，只好研究一些奇怪的方式来优化这电脑的使用体验。</summary>
    
    
    
    
    <category term="技术" scheme="https://blog.kkren.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>持续集成部署 hexo</title>
    <link href="https://blog.kkren.me/2018/12/hexo-with-travis/"/>
    <id>https://blog.kkren.me/2018/12/hexo-with-travis/</id>
    <published>2018-12-20T13:39:47.000Z</published>
    <updated>2020-11-10T11:40:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>过去一直在写完博客后手动生成静态文件，然后丢到服务器上。但是在多终端上不方便保持统一的体验。解决这个问题的办法是使用 Travis ci 自动编译 hexo 的静态文件，然后通过 GitHub webhook 通知服务器更新网站。<a id="more"></a></p><h2 id="创建-GitHub-repo">创建 GitHub repo</h2><p>使用 <code>git clone</code> 将 repo 下载到本地后，执行 <code>git checkout hexo</code> 创建一个 hexo 分支，然后把原来的 hexo 文件夹全部复制进来。如果你之前曾用 git clone 的方式安装过主题，建议将主题目录里的 .git 文件删除，或者改用 submodule 的方式引用主题项目（不推荐）。</p><h2 id="创建-Travis-ci-配置">创建 Travis ci 配置</h2><p>复制以下代码，<strong>修改里面有关用户名和仓库地址的信息后</strong>储存为 .travis.yml 在 repo 目录中。</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">language</span><span class="token punctuation">:</span> node_js<span class="token key atrule">node_js</span><span class="token punctuation">:</span> stable<span class="token key atrule">branchs</span><span class="token punctuation">:</span>  <span class="token key atrule">only</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> hexo<span class="token key atrule">cache</span><span class="token punctuation">:</span>  <span class="token key atrule">directories</span><span class="token punctuation">:</span>  <span class="token punctuation">-</span> node_modules<span class="token key atrule">before_install</span><span class="token punctuation">:</span><span class="token comment"># 安装hexo-cli</span><span class="token punctuation">-</span> npm install <span class="token punctuation">-</span>g hexo<span class="token punctuation">-</span>cli<span class="token key atrule">install</span><span class="token punctuation">:</span><span class="token comment"># 安装依赖包</span><span class="token punctuation">-</span> npm install<span class="token key atrule">script</span><span class="token punctuation">:</span><span class="token punctuation">-</span> hexo g<span class="token key atrule">after_script</span><span class="token punctuation">:</span><span class="token punctuation">-</span> git clone https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>GH_REF<span class="token punctuation">}</span> .deploy_git<span class="token punctuation">-</span> cd .deploy_git<span class="token punctuation">-</span> git checkout master<span class="token punctuation">-</span> cd ../<span class="token punctuation">-</span> mv .deploy_git/.git/ ./public/<span class="token punctuation">-</span> cd ./public<span class="token punctuation">-</span> git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.email "example@gmail.com"<span class="token punctuation">-</span> git config <span class="token punctuation">-</span><span class="token punctuation">-</span>global user.name "username" <span class="token punctuation">-</span> git add .<span class="token punctuation">-</span> git commit <span class="token punctuation">-</span>m "Travis CI Auto Builder"<span class="token punctuation">-</span> git push <span class="token punctuation">-</span><span class="token punctuation">-</span>force <span class="token punctuation">-</span><span class="token punctuation">-</span>quiet "https<span class="token punctuation">:</span>//$<span class="token punctuation">{</span>GH_TOKEN<span class="token punctuation">}</span>@$<span class="token punctuation">{</span>GH_REF<span class="token punctuation">}</span>" master<span class="token punctuation">:</span>master<span class="token key atrule">env</span><span class="token punctuation">:</span>    <span class="token key atrule">global</span><span class="token punctuation">:</span>        <span class="token punctuation">-</span> <span class="token key atrule">GH_REF</span><span class="token punctuation">:</span> github.com/username/username.github.io.git <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>GH_TOKEN 需要加密后储存在配置文件中，打开 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucy9uZXc=">Github 设置<i class="fa fa-external-link-alt"></i></span> 创建一个新的 token，按下图配置权限即可：<img data-src="https://i.loli.net/2018/12/20/5c1b939e53817.png" alt="token"></p><p>然后，在安装好 ruby 的环境下，进入到 repo 的目录执行下面的命令，就能把 token 加密后添加到 Travis 配置中。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">gem <span class="token function">install</span> travistravis login<span class="token comment"># 交互式完成登陆</span>travis encrypt <span class="token string">'GH_TOKEN=&lt; 这里填入你生成的 Token &gt;'</span> --add<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在 Linux 环境下，通过包管理器就能安装 ruby，具体步骤请查看<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVieS1sYW5nLm9yZy96aF9jbi9kb2N1bWVudGF0aW9uL2luc3RhbGxhdGlvbi8=">官方文档<i class="fa fa-external-link-alt"></i></span>。</p><h2 id="启用-Travis-ci">启用 Travis ci</h2><p>在 <span class="exturl" data-url="aHR0cHM6Ly90cmF2aXMtY2kub3JnLw==">Travis ci 官网<i class="fa fa-external-link-alt"></i></span>用自己的 GitHub 账户登陆，然后选择你网站的 repo，编译应该会自动开始。一切正常的话，编译结束后你 repo master 分支已经部署好了网站的静态文件。整个编译的日志都会被记录下来。常见问题的解决方法：</p><h3 id="需要通过包管理器安装其他依赖">需要通过包管理器安装其他依赖</h3><p>在 <code>npm install</code> 上添加两行：</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token punctuation">-</span> sudo apt<span class="token punctuation">-</span>get update<span class="token punctuation">-</span> sudo apt<span class="token punctuation">-</span>get install <span class="token punctuation">-</span>y package<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>sudo</code> 和 <code>apt-get update</code> 都是必须的</p><h2 id="接收-webhook">接收 webhook</h2><p>新建一个文件夹保存 webhook.js 和 <span class="exturl" data-url="aHR0cDovL2RlcGxveS5zaA==">deploy.sh<i class="fa fa-external-link-alt"></i></span>，在这个文件夹下执行 <code>npm install github-webhook-handler</code>。将以下代码保存到 webhook.js：</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token keyword">var</span> createHandler <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'github-webhook-handler'</span><span class="token punctuation">)</span><span class="token keyword">var</span> handler <span class="token operator">=</span> <span class="token function">createHandler</span><span class="token punctuation">(</span><span class="token punctuation">{</span>path<span class="token operator">:</span> <span class="token string">'/deploy'</span><span class="token punctuation">,</span>secret<span class="token operator">:</span> <span class="token string">'token'</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment">// 上面的 secret 保持和 GitHub 后台设置的一致</span><span class="token keyword">function</span> <span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token parameter">cmd<span class="token punctuation">,</span> args<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">var</span> spawn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'child_process'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>spawn<span class="token punctuation">;</span><span class="token keyword">var</span> child <span class="token operator">=</span> <span class="token function">spawn</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">buffer</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>resp <span class="token operator">+=</span> buffer<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>child<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">callback</span><span class="token punctuation">(</span>resp<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token function">handler</span><span class="token punctuation">(</span>req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>res<span class="token punctuation">.</span>statusCode <span class="token operator">=</span> <span class="token number">404</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">'no such location'</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">7777</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'Error:'</span><span class="token punctuation">,</span> err<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span>handler<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'push'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Received a push event for %s to %s'</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">,</span>event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>ref<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">run_cmd</span><span class="token punctuation">(</span><span class="token string">'sh'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'./deploy.sh'</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span>payload<span class="token punctuation">.</span>repository<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">text</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>text<span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将以下代码保存到 <span class="exturl" data-url="aHR0cDovL2RlcGxveS5zaA==">deploy.sh<i class="fa fa-external-link-alt"></i></span>：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token assign-left variable">WEB_PATH</span><span class="token operator">=</span><span class="token string">'/var/www/'</span><span class="token variable">$1</span><span class="token builtin class-name">cd</span> <span class="token variable">$WEB_PATH</span><span class="token builtin class-name">echo</span> <span class="token string">"pulling source code at <span class="token variable">$WEB_PATH</span>..."</span><span class="token function">git</span> pull<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>假设网站目录在 /var/www/ 下，以 repo 名命名。然后执行 :</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> pm2 -gpm2 start webhook.js<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>安装 pm2 来保持 webhook 运行。然后在 nginx 的站点配置文件中添加：</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">location</span> <span class="token operator">/</span>deploy <span class="token punctuation">{</span><span class="token keyword">proxy_pass</span> <span class="token keyword">http</span><span class="token punctuation">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token number">127.0</span><span class="token number">.0</span><span class="token number">.1</span><span class="token punctuation">:</span><span class="token number">7777</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重载 nginx，然后提前从 GitHub clone 下网站文件到相应的目录。</p><h2 id="添加-webhook">添加 webhook</h2><p>打开 repo 的 settings-webhooks，点击 add webhook，按下图配置：<br><img data-src="https://i.loli.net/2018/12/20/5c1b9a248b403.png" alt="webhook"><br>secret 要和 webhook.js 中的相同。添加以后，如果 request 正确的返回了 200，网站应该自动更新完毕了。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;过去一直在写完博客后手动生成静态文件，然后丢到服务器上。但是在多终端上不方便保持统一的体验。解决这个问题的办法是使用 Travis ci 自动编译 hexo 的静态文件，然后通过 GitHub webhook 通知服务器更新网站。</summary>
    
    
    
    
    <category term="技术" scheme="https://blog.kkren.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>本博客的 Nginx 优化编译方案</title>
    <link href="https://blog.kkren.me/2018/10/nginx-configuration/"/>
    <id>https://blog.kkren.me/2018/10/nginx-configuration/</id>
    <published>2018-10-25T11:02:52.000Z</published>
    <updated>2020-11-10T11:40:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>在编译的过程中，参考了 <span class="exturl" data-url="aHR0cHM6Ly9pbXF1cXUuY29tL3Bvc3QvZW5hYmxlLXRscy0xLTMuaHRtbA==">imququ<i class="fa fa-external-link-alt"></i></span> 等大佬的资料，在最新的 mainline Nginx 之上添加了 ngx_brotli 模块并使用最新的 OpenSSL 编译。<a id="more"></a></p><h2 id="编译-Nginx">编译 Nginx</h2><p>我服务器的环境是  debian 9，在编译前先安装依赖。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> build-essential libpcre3 libpcre3-dev zlib1g-dev <span class="token function">unzip</span> <span class="token function">git</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后下载并解压 Nginx 和其他模块</p><pre class="line-numbers language-sh" data-language="sh"><code class="language-sh"># Nginxwget -c http://nginx.org/download/nginx-1.15.6.tar.gztar zxf nginx-1.15.6.tar.gz# OpenSSLwget -c  https://github.com/openssl/openssl/archive/OpenSSL_1_1_1.tar.gztar xzf OpenSSL_1_1_1.tar.gzmv openssl-OpenSSL_1_1_1 openssl# ngx_brotligit clone https://github.com/google/ngx_brotli.gitcd ngx_brotligit submodule update --initcd ../<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>开始编译</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token builtin class-name">cd</span> nginx-1.15.6./configure --add-module<span class="token operator">=</span><span class="token punctuation">..</span>/ngx_brotli --with-openssl<span class="token operator">=</span><span class="token punctuation">..</span>/openssl --with-openssl-opt<span class="token operator">=</span><span class="token string">'enable-tls1_3'</span> --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module<span class="token function">make</span><span class="token function">sudo</span> <span class="token function">make</span> <span class="token function">install</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果需要升级 Nginx ，不要执行 <code>sudo make install</code> ，执行下面的命令。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">cp</span> /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old<span class="token comment"># 备份 Nginx</span><span class="token function">cp</span> -f objs/nginx /usr/local/nginx/sbin/nginxnginx -t<span class="token comment"># 解决上一条命令出现的问题后继续</span><span class="token function">make</span> upgrade<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="配置-Nginx">配置 Nginx</h2><p>安装后 Nginx 和配置在 <code>/usr/local/nginx/</code> 下面。首先打开 <code>conf/nginx.conf</code></p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">sendfile</span>        on<span class="token punctuation">;</span><span class="token keyword">tcp_nopush</span>     on<span class="token punctuation">;</span><span class="token keyword">tcp_nodelay</span>    on<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这三行，原来注释掉的改成 on 。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">gzip</span>on<span class="token punctuation">;</span><span class="token keyword">gzip_vary</span>     on<span class="token punctuation">;</span><span class="token keyword">gzip_comp_level</span><span class="token number">6</span><span class="token punctuation">;</span><span class="token keyword">gzip_buffers</span>   <span class="token number">16</span> <span class="token number">8</span>k<span class="token punctuation">;</span><span class="token keyword">gzip_min_length</span><span class="token number">1000</span><span class="token punctuation">;</span><span class="token keyword">gzip_proxied</span>   any<span class="token punctuation">;</span><span class="token keyword">gzip_disable</span>   <span class="token string">"msie6"</span><span class="token punctuation">;</span><span class="token keyword">gzip_http_version</span><span class="token number">1.0</span><span class="token punctuation">;</span><span class="token keyword">gzip_types</span>    text<span class="token operator">/</span>plain text<span class="token operator">/</span>css application<span class="token operator">/</span>json application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>xml application<span class="token operator">/</span>xml application<span class="token operator">/</span>xml<span class="token operator">+</span>rss text<span class="token operator">/</span>javascript application<span class="token operator">/</span>javascript image<span class="token operator">/</span>svg<span class="token operator">+</span>xml<span class="token punctuation">;</span>    brotlion<span class="token punctuation">;</span>brotli_comp_level<span class="token number">6</span><span class="token punctuation">;</span>brotli_typestext<span class="token operator">/</span>plain text<span class="token operator">/</span>css application<span class="token operator">/</span>json application<span class="token operator">/</span>x<span class="token operator">-</span>javascript text<span class="token operator">/</span>xml application<span class="token operator">/</span>xml application<span class="token operator">/</span>xml<span class="token operator">+</span>rss text<span class="token operator">/</span>javascript application<span class="token operator">/</span>javascript image<span class="token operator">/</span>svg<span class="token operator">+</span>xml<span class="token punctuation">;</span>  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启用 gzip 和 brotli 压缩。然后创建一个网站的配置。</p><pre class="line-numbers language-nginx" data-language="nginx"><code class="language-nginx"><span class="token keyword">ssl_protocols</span>TLSv1<span class="token punctuation">.</span><span class="token number">3</span> TLSv1<span class="token punctuation">.</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">ssl_ciphers</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">256</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA384<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>CHACHA20<span class="token operator">-</span>POLY1305<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>GCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span><span class="token number">8</span><span class="token operator">-</span>SHA256<span class="token punctuation">:</span>TLS13<span class="token operator">-</span>AES<span class="token operator">-</span><span class="token number">128</span><span class="token operator">-</span>CCM<span class="token operator">-</span>SHA256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>CHACHA20<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>CHACHA20<span class="token operator">-</span>draft<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>ECDSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>aRSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES128<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>ECDSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>EECDH<span class="token operator">+</span>aRSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>RSA<span class="token operator">+</span>AES256<span class="token punctuation">:</span>EECDH<span class="token punctuation">;</span><span class="token keyword">add_header</span>Strict<span class="token operator">-</span>Transport<span class="token operator">-</span>Security <span class="token string">"max-age=63072000; includeSubDomains; preload"</span><span class="token punctuation">;</span><span class="token keyword">add_header</span>X<span class="token operator">-</span>Frame<span class="token operator">-</span>Options <span class="token keyword">deny</span><span class="token punctuation">;</span><span class="token keyword">add_header</span>X<span class="token operator">-</span>Content<span class="token operator">-</span>Type<span class="token operator">-</span>Options nosniff<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>重点就是加密算法的选择和 HSTS 。</p><h2 id="其他的优化">其他的优化</h2><p>博客的所有文件都会用 service worker 永久缓存在读者的电脑上。直接安装 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pvdW1pYW9qaWFuZy9oZXhvLXNlcnZpY2Utd29ya2Vy">hexo-service-worker<i class="fa fa-external-link-alt"></i></span> 插件即可。</p><p>博客的图片放在 <span class="exturl" data-url="aHR0cHM6Ly9zbS5tcy8=">sm.ms<i class="fa fa-external-link-alt"></i></span> 图床上，然后使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JvYmluLWZyb250L2hleG8tbGF6eWxvYWQ=">hexo-lazyload<i class="fa fa-external-link-alt"></i></span> 制作加载时的缩略图。放上一张首次加载首页的耗时图。<img data-src="https://i.loli.net/2018/11/11/5be7d80a4ef45.png" alt="加载图"></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在编译的过程中，参考了 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9pbXF1cXUuY29tL3Bvc3QvZW5hYmxlLXRscy0xLTMuaHRtbA==&quot;&gt;imququ&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 等大佬的资料，在最新的 mainline Nginx 之上添加了 ngx_brotli 模块并使用最新的 OpenSSL 编译。</summary>
    
    
    
    
  </entry>
  
  <entry>
    <title>使用 transmission 在 linux 上搭建 pt 下载环境</title>
    <link href="https://blog.kkren.me/2018/05/transmission-in-linux/"/>
    <id>https://blog.kkren.me/2018/05/transmission-in-linux/</id>
    <published>2018-05-26T12:43:10.000Z</published>
    <updated>2020-11-10T11:40:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>现在在 linux 服务器上部署的 pt 下载器主要是 aria2， transmission 和 rtorrent，然而 aria2 要下载 pt 的话还需要伪装客户端，rtorrent 的 webui 太丑加载速度还很慢，于是最后选择了 transmission。博客中提到的服务器的配置为 Intel Atom N2800 2c/4 t 1.86GHz，4Gb DDR3 1066，2T HDD， 位于欧洲，不抗投诉。<a id="more"></a></p><h2 id="安装transmission与deamon">安装 transmission 与 deamon</h2><p>服务器的系统环境是 debian9，所以可以很方便用包管理器安装需要的软件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">apt -y install transmission transmission-deamonsystemctl enable transmission-deamon<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>好像没有什么特别的配置要配置的，反正 webui 里都可以改</p><h2 id="安装修改版的transmission-webui">安装修改版的 transmission webui</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbmdnYW5nL3RyYW5zbWlzc2lvbi13ZWItY29udHJvbA==">项目地址<i class="fa fa-external-link-alt"></i></span>，安装过程也是全自动的</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control.shbash install-tr-control.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>接下来输入 1 然后按回车就可以了<br>然后重启下 transmission</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">systemctl restart transmission-deamon<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装-transmission-rss">安装 transmission-rss</h2><h2 id="使用nginx-反代webui">使用 nginx 反代 webui</h2><p>transmission 的 webui 没有 ssl 也没法加密码，所以用 nginx 反代下，性能更高。我安装的 nginx 是来自<span class="exturl" data-url="aHR0cHM6Ly9zYi5zYi9ibG9nL2RlYmlhbi1pbnN0YWxsLW5naW54LXBocC1teXNxbC8=">烧饼博客上的教程<i class="fa fa-external-link-alt"></i></span>，下面是配置文件</p><pre class="line-numbers language-none"><code class="language-none">server {listen 80 default_server;listen [::]:80 default_server;server_name example.com;location /.well-known/acme-challenge {root /var/www/letsencrypt;}location / {return 301 https://$host$request_uri;}}server {listen 443 ssl http2 default_server;listen [::]:443 ssl http2 default_server;server_name example.com;client_max_body_size 10m;server_tokens off;root /var/www/rutorrent;index index.html index.htm index.php;ssl_dhparam /etc/nginx/ssl/dhparam.pem;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';ssl_prefer_server_ciphers on;ssl_session_cache shared:SSL:50m;ssl_session_timeout 1d;ssl_certificate /etc/nginx/ssl/fullchain.cer;ssl_certificate_key /etc/nginx/ssl/dl.key;add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";add_header X-Frame-Options SAMEORIGIN;add_header X-Content-Type-Options nosniff;add_header X-XSS-Protection "1; mode=block";location / {auth_basic "Restricted";auth_basic_user_file /etc/nginx/passwd;proxy_pass  http://127.0.0.1:9091;}location ~ \.php$ {fastcgi_pass unix:/run/php/php7.2-fpm.sock;include snippets/fastcgi-php.conf;}access_log /var/log/nginx/rutorrent.access.log;error_log /var/log/nginx/rutorrent.error.log;}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其中，<code>/etc/nginx/passwd</code> 的生成方法是 <code>printf "user:$(openssl passwd -crypt password)\n" &gt;&gt; /etc/nginx/passwd</code>。</p><h2 id="最后的效果">最后的效果</h2><p><img data-src="https://i.loli.net/2018/10/22/5bcda5ea4387b.jpg" alt="1540133454051"></p><p>真香</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;现在在 linux 服务器上部署的 pt 下载器主要是 aria2， transmission 和 rtorrent，然而 aria2 要下载 pt 的话还需要伪装客户端，rtorrent 的 webui 太丑加载速度还很慢，于是最后选择了 transmission。博客中提到的服务器的配置为 Intel Atom N2800 2c/4 t 1.86GHz，4Gb DDR3 1066，2T HDD， 位于欧洲，不抗投诉。</summary>
    
    
    
    
    <category term="技术" scheme="https://blog.kkren.me/tags/%E6%8A%80%E6%9C%AF/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.kkren.me/2018/05/hello-world/"/>
    <id>https://blog.kkren.me/2018/05/hello-world/</id>
    <published>2018-05-13T14:10:52.000Z</published>
    <updated>2020-11-10T11:40:04.093Z</updated>
    
    <content type="html"><![CDATA[<p>在咕咕咕了很久很久以后，这个破博客又上线了。以前的文章什么都没有了，反正也没几篇。以后写的 bug 都会放在这里</p><p>2018 年 5 月 13 日</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在咕咕咕了很久很久以后，这个破博客又上线了。以前的文章什么都没有了，反正也没几篇。以后写的 bug 都会放在这里&lt;/p&gt;
&lt;p&gt;2018 年 5 月 13 日&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
