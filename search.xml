<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Windows 字体渲染优化]]></title>
    <url>%2F2019%2F03%2Fimprove-windows-font-rendering%2F</url>
    <content type="text"><![CDATA[从 2k 屏的 Surface book 换到 24 寸的 1080p Dell 屏，Windows 默认的字体渲染几乎不能忍。因为我很穷，买不起高分辨率的显示器，只好研究一些奇怪的方式来优化这电脑的使用体验。 noMeiryoUInoMeiryoUI 是我第一个尝试的方案。它可以在不修改系统文件的前提下修改系统的字体。按照网上的推荐，我将字体改成了 更纱黑体。效果还是有一点的，但是 Windows 字体最大的问题——笔画的锯齿非常明显，并没有得到改善。 Mactype在沉寂了许久以后，最新的 MacType 2018.1-beta5 已经大大改善了兼容性问题。现在 Mactype 已经可以支持包括 Chrome 在内的大多数 DirectWrite 程序。 Mactype 的加载方式，我选择的服务加载。第一次使用的时候可以使用托盘加载，没有问题再切换成其他模式。使用托盘加载时我有时会遇到 Chrome 不加载 Mactype 的问题，不知道是不是 bug。 Mactype 的配置推荐 James 大佬 的。我在他的配置上又做了一些修改。从 L324 到 L282 我全部注释了，因为加载这些进程在我这里没有遇到什么奇怪的问题，而且文件管理器毕竟还是经常要用到的。我也没有把 Chrome 中的雅黑替换成思源黑体，因为我也没有遇到奇怪的 bug。然后，在 Chrome 中用 XStyle 之类的插件加载这个 CSS。然后，[ExcludeSub] 中加入了 origin 和 uplay 的进程，这两个程序替换字体后图标都变成了方框。 [Exclude] 呢？这个配置有什么用？答案就是没有用，作者在 Issue 中解释过了。 [Exclude] - does not exist. 许多配置不生效？很有可能是文件编码的问题。从 GitHub 上下载的文件默认是 UTF-8 编码，但是 Mactype 识别的是 GB 2312 编码。需要你自己用文本编辑器转换一下。 效果 Mactype 的渲染策略大概是，当分辨率不足以清晰的渲染字体的时候，用一团灰色的东西来渲染对应的笔画，说的简单点就是抗锯齿。对于天天看中文的人来说，不用看清每一个笔画就能看懂对应的字，而且这应该是分辨率不足的情况下最大程度模仿印刷效果的方式，比微软选择的 Hinting 好很多（大概）。]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[持续集成部署 hexo]]></title>
    <url>%2F2018%2F12%2Fhexo-with-travis%2F</url>
    <content type="text"><![CDATA[过去一直在写完博客后手动生成静态文件，然后丢到服务器上。但是在多终端上不方便保持统一的体验。解决这个问题的办法是使用 Travis ci 自动编译 hexo 的静态文件，然后通过 GitHub webhook 通知服务器更新网站。 创建 GitHub repo使用 git clone 将 repo 下载到本地后，执行 git checkout hexo 创建一个 hexo 分支，然后把原来的 hexo 文件夹全部复制进来。如果你之前曾用 git clone 的方式安装过主题，建议将主题目录里的 .git 文件删除，或者改用 submodule 的方式引用主题项目（不推荐）。 创建 Travis ci 配置复制以下代码， 修改里面有关用户名和仓库地址的信息后 储存为 .travis.yml 在 repo 目录中。 12345678910111213141516171819202122232425262728293031language: node_jsnode_js: stablebranchs: only: - hexocache: directories: - node_modulesbefore_install:# 安装 hexo-cli- npm install -g hexo-cliinstall:# 安装依赖包 - npm installscript:- hexo gafter_script:- git clone https://${GH_REF} .deploy_git- cd .deploy_git- git checkout master- cd ../- mv .deploy_git/.git/ ./public/- cd ./public- git config --global user.email "example@gmail.com"- git config --global user.name "username" - git add .- git commit -m "Travis CI Auto Builder"- git push --force --quiet "https://${GH_TOKEN}@${GH_REF}" master:masterenv: global: - GH_REF: github.com/username/username.github.io.git GH_TOKEN 需要加密后储存在配置文件中，打开 Github 设置 创建一个新的 token，按下图配置权限即可： 然后，在安装好 ruby 的环境下，进入到 repo 的目录执行下面的命令，就能把 token 加密后添加到 Travis 配置中。 1234gem install travistravis login# 交互式完成登陆 travis encrypt 'GH_TOKEN=< 这里填入你生成的 Token >' --add 在 Linux 环境下，通过包管理器就能安装 ruby，具体步骤请查看 官方文档。 启用 Travis ci在 Travis ci 官网 用自己的 GitHub 账户登陆，然后选择你网站的 repo，编译应该会自动开始。一切正常的话，编译结束后你 repo master 分支已经部署好了网站的静态文件。整个编译的日志都会被记录下来。常见问题的解决方法： 需要通过包管理器安装其他依赖在 npm install 上添加两行： 12- sudo apt-get update- sudo apt-get install -y package sudo 和 apt-get update 都是必须的 接收 webhook新建一个文件夹保存 webhook.js 和 deploy.sh，在这个文件夹下执行 npm install github-webhook-handler。将以下代码保存到 webhook.js： 12345678910111213141516171819202122232425262728293031323334353637383940var http = require('http')var createHandler = require('github-webhook-handler')var handler = createHandler({ path: '/deploy', secret: 'token'})// 上面的 secret 保持和 GitHub 后台设置的一致 function run_cmd(cmd, args, callback) { var spawn = require('child_process').spawn; var child = spawn(cmd, args); var resp = ""; child.stdout.on('data', function(buffer) { resp += buffer.toString(); }); child.stdout.on('end', function() { callback(resp) });}http.createServer(function(req, res) { handler(req, res, function(err) { res.statusCode = 404 res.end('no such location') })}).listen(7777)handler.on('error', function(err) { console.error('Error:', err.message)})handler.on('push', function(event) { console.log('Received a push event for %s to %s', event.payload.repository.name, event.payload.ref); run_cmd('sh', ['./deploy.sh', event.payload.repository.name], function(text) { console.log(text) });}) 将以下代码保存到 deploy.sh： 1234567#!/bin/bashWEB_PATH='/var/www/'$1cd $WEB_PATHecho "pulling source code at $WEB_PATH..."git pull 假设网站目录在 /var/www/ 下，以 repo 名命名。然后执行 : 12npm install pm2 -gpm2 start webhook.js 安装 pm2 来保持 webhook 运行。然后在 nginx 的站点配置文件中添加： 123location /deploy { proxy_pass http://127.0.0.1:7777;} 重载 nginx，然后提前从 GitHub clone 下网站文件到相应的目录。 添加 webhook打开 repo 的 settings-webhooks，点击 add webhook，按下图配置：secret 要和 webhook.js 中的相同。添加以后，如果 request 正确的返回了 200，网站应该自动更新完毕了。]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[本博客的 Nginx 优化编译方案]]></title>
    <url>%2F2018%2F10%2Fnginx-configuration%2F</url>
    <content type="text"><![CDATA[在编译的过程中，参考了 imququ 等大佬的资料，在最新的 mainline Nginx 之上添加了 ngx_brotli 模块并使用最新的 OpenSSL 编译。 编译 Nginx我服务器的环境是 debian 9，在编译前先安装依赖。 1sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g-dev unzip git 然后下载并解压 Nginx 和其他模块 123456789101112# Nginxwget -c http://nginx.org/download/nginx-1.15.6.tar.gztar zxf nginx-1.15.6.tar.gz# OpenSSLwget -c https://github.com/openssl/openssl/archive/OpenSSL_1_1_1.tar.gztar xzf OpenSSL_1_1_1.tar.gzmv openssl-OpenSSL_1_1_1 openssl# ngx_brotligit clone https://github.com/google/ngx_brotli.gitcd ngx_brotligit submodule update --initcd ../ 开始编译 1234cd nginx-1.15.6./configure --add-module=../ngx_brotli --with-openssl=../openssl --with-openssl-opt='enable-tls1_3' --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_modulemakesudo make install 如果需要升级 Nginx ，不要执行 sudo make install ，执行下面的命令。 123456cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old# 备份 Nginxcp -f objs/nginx /usr/local/nginx/sbin/nginxnginx -t# 解决上一条命令出现的问题后继续 make upgrade 配置 Nginx安装后 Nginx 和配置在 /usr/local/nginx/ 下面。首先打开 conf/nginx.conf 123sendfile on;tcp_nopush on;tcp_nodelay on; 这三行，原来注释掉的改成 on 。 12345678910111213gzip on;gzip_vary on;gzip_comp_level 6;gzip_buffers 16 8k;gzip_min_length 1000;gzip_proxied any;gzip_disable "msie6";gzip_http_version 1.0;gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml; brotli on;brotli_comp_level 6;brotli_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml; 启用 gzip 和 brotli 压缩。然后创建一个网站的配置。 12345ssl_protocols TLSv1.3 TLSv1.2;ssl_ciphers TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH;add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";add_header X-Frame-Options deny;add_header X-Content-Type-Options nosniff; 重点就是加密算法的选择和 HSTS 。 其他的优化博客的所有文件都会用 service worker 永久缓存在读者的电脑上。直接安装 hexo-service-worker 插件即可。 博客的图片放在 sm.ms 图床上，然后使用 hexo-lazyload 制作加载时的缩略图。放上一张首次加载首页的耗时图。]]></content>
  </entry>
  <entry>
    <title><![CDATA[使用 transmission 在 linux 上搭建 pt 下载环境]]></title>
    <url>%2F2018%2F05%2Ftransmission-in-linux%2F</url>
    <content type="text"><![CDATA[现在在 linux 服务器上部署的 pt 下载器主要是 aria2， transmission 和 rtorrent，然而 aria2 要下载 pt 的话还需要伪装客户端，rtorrent 的 webui 太丑加载速度还很慢，于是最后选择了 transmission。博客中提到的服务器的配置为 Intel Atom N2800 2c/4 t 1.86GHz，4Gb DDR3 1066，2T HDD， 位于欧洲，不抗投诉。 安装 transmission 与 deamon服务器的系统环境是 debian9，所以可以很方便用包管理器安装需要的软件 12apt -y install transmission transmission-deamonsystemctl enable transmission-deamon 好像没有什么特别的配置要配置的，反正 webui 里都可以改 安装修改版的 transmission webui项目地址，安装过程也是全自动的 12wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control.shbash install-tr-control.sh 接下来输入 1 然后按回车就可以了 然后重启下 transmission 1systemctl restart transmission-deamon 安装 transmission-rss使用 nginx 反代 webuitransmission 的 webui 没有 ssl 也没法加密码，所以用 nginx 反代下，性能更高。我安装的 nginx 是来自 烧饼博客上的教程，下面是配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657server {listen 80 default_server;listen [::]:80 default_server;server_name example.com;location /.well-known/acme-challenge {root /var/www/letsencrypt;}location / {return 301 https://$host$request_uri;}}server {listen 443 ssl http2 default_server;listen [::]:443 ssl http2 default_server;server_name example.com;client_max_body_size 10m;server_tokens off;root /var/www/rutorrent;index index.html index.htm index.php;ssl_dhparam /etc/nginx/ssl/dhparam.pem;ssl_protocols TLSv1 TLSv1.1 TLSv1.2;ssl_ciphers 'ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS';ssl_prefer_server_ciphers on;ssl_session_cache shared:SSL:50m;ssl_session_timeout 1d;ssl_certificate /etc/nginx/ssl/fullchain.cer;ssl_certificate_key /etc/nginx/ssl/dl.key;add_header Strict-Transport-Security "max-age=63072000; includeSubDomains; preload";add_header X-Frame-Options SAMEORIGIN;add_header X-Content-Type-Options nosniff;add_header X-XSS-Protection "1; mode=block";location / {auth_basic "Restricted";auth_basic_user_file /etc/nginx/passwd;proxy_pass http://127.0.0.1:9091;}location ~ \.php$ {fastcgi_pass unix:/run/php/php7.2-fpm.sock;include snippets/fastcgi-php.conf;}access_log /var/log/nginx/rutorrent.access.log;error_log /var/log/nginx/rutorrent.error.log;} 其中，/etc/nginx/passwd 的生成方法是 printf "user:$(openssl passwd -crypt password)\n" >> /etc/nginx/passwd。 最后的效果 真香]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2018%2F05%2Fhello-world%2F</url>
    <content type="text"><![CDATA[在咕咕咕了很久很久以后，这个破博客又上线了。以前的文章什么都没有了，反正也没几篇。以后写的 bug 都会放在这里 2018 年 5 月 13 日]]></content>
  </entry>
</search>
