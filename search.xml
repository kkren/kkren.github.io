<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>XPS 15 杀手？ - Dell Inspiron 7591 体验报告 by kotomei</title>
    <url>/2019/08/Dell-Inspiron-7591-review/</url>
    <content><![CDATA[<p>谈起 Dell，不少人想到的应该都是被称为超极本标杆的 XPS 系列。但其高贵的售价，只能让像我这样的穷人看着流口水。但在今年的 ComputeX 上，Dell 发布了一款被称作为穷人版 XPS 15 的 Inspiron 7590 ，对我来说终于找到了一款在各方面都没有明显短板的同时还「穷人友好」的笔记本。在准备入手时发现京东上 7590 的换壳减价版 7951 正在秒杀促销，Google 一番后发现二者除外壳材质外几乎毫无差别。于是为了钱包能更轻松些，我选择了 7951。事后证明这次痛快出手是个正确的决定。 <a id="more"></a><br><img alt="Banner" data-src="https://i.loli.net/2019/07/09/5d236cb3c955866972.jpg"></p>
<center><i>Dell 以高超的性价比，生动地演绎了什么是 Creator laptop。</i> </center>
## 配置
 - i5-9300H@2.4GHz，4C8T，最高可睿频至 4.1GHz
 - 单通道 8GB DDR4 2666MHz （可自行增加内存条升级为双通道）
 - 512G PCIe x2 SSD
 - GTX1650 4GB 显存版本
 - 15.6 寸 1080P 60FPS IPS 屏幕，色域为 NTSC 72% 并支持 HDR
 - 97Wh 六芯电池
 - IO 接口方面：
     - 1 个 HDMI 2.0 接口
     - 3 个 USB 3.1 Gen1 接口，均为 USB Type-A
     - 1 个雷电三接口
     - 1 个 MicroSD 读卡器（USB）
     - 1 个耳机/麦克风二合一 3.5MM 接口 

<h2 id="初步印象"><a href="#初步印象" class="headerlink" title="初步印象"></a>初步印象</h2><p>京东的物流速度当然没得说，到手之后我也是第一时间在 Android Dress 群内进行了<span class="exturl" data-url="aHR0cHM6Ly90Lm1lL0FuZHJvaWREcmVzcy84OTM3MTg=" title="https://t.me/AndroidDress/893718">图片直播开箱<i class="fa fa-external-link"></i></span>。实测 1.9KG 的机身重量对于一台拥有 97Wh 的电池容量的设备可以说是十分惊喜了。银白色的机身可能不合有些人的口味，但对我来说完全 OK。</p>
<p>在随后的使用中发现笔记本后盖的左下和右下角未完全紧贴，当时认为是自己开启后盖安装内存条时由于力度过大导致后盖变形，所以并没有放在心上。然而在随后和其他几位 7951 买家沟通后发现有一部分人与我的情况一样，并且他们未开启过后盖。可能这次 Dell 的外壳设计有些问题。</p>
<p>另外，在上手 7591 后的几个小时内，我的手指被外壳割出了伤口，这也让我对「外壳割手」的认识又上了一个新的层次。</p>
<h2 id="外观"><a href="#外观" class="headerlink" title="外观"></a>外观</h2><p><img alt="A" data-src="https://i.loli.net/2019/07/08/5d22f5761830c81269.jpg"></p>
<center>A 面，还是经典的 Dell 圆形 Logo</center>

<p><img alt="BC.jpg" data-src="https://i.loli.net/2019/07/08/5d22f57f3833679487.jpg"></p>
<center>B、C 面，可以看到键盘和机身是同样材质的金属键盘</center>

<p><img alt="D.jpg" data-src="https://i.loli.net/2019/07/08/5d22f5785a3f971570.jpg"></p>
<center>D 面，作为相对廉价的 Inspiron 产品线肯定没有和 XPS 那样「高贵」的「狗牌」</center>

<h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>不多说，直接放跑分成绩。</p>
<p><strong>进行测试时由于控制变量并不严谨，本部分的成绩仅供参考。</strong></p>
<ul>
<li><span class="exturl" data-url="aHR0cHM6Ly93d3cuM2RtYXJrLmNvbS8zZG0vMzY4NDc4NjU=" title="https://www.3dmark.com/3dm/36847865">3DMark 成绩<i class="fa fa-external-link"></i></span></li>
</ul>
<ul>
<li><p>CineBench R20 成绩</p>
<p><img alt="CineBench R20 成绩" data-src="https://i.loli.net/2019/07/05/5d1f193e031f955529.jpg"></p>
<ul>
<li>CineBench R15 成绩</li>
</ul>
<p><img alt=" CineBench R15 成绩" data-src="https://i.loli.net/2019/07/05/5d1f19ab97b0183232.jpg"></p>
</li>
</ul>
<ul>
<li>在 AIDA 64 的系统稳定性测试下，CPU FPU 双烤一分半后 CPU 频率在 3GHz +- 0.05GHZ 浮动，CPU 单烤一分半时 CPU 频率稳定在 3.65GHz -+ 0.02GHz。</li>
</ul>
<p>值得一提的是，在更换原厂硅脂为信越 7921 之后，CPU 的性能相对于原厂硅脂又有了提升。</p>
<ul>
<li><p>更换硅脂后的 CineBench R20 成绩</p>
<p><img alt="更换硅脂后的 CineBench R20 成绩" data-src="https://i.loli.net/2019/07/05/5d1f1aefce90758420.jpg"></p>
</li>
<li><p>更换硅脂后的 AIDA 64 CPU FPU 双烤成绩</p>
<p><img alt="更换硅脂后的 AIDA 64 CPU FPU 双烤成绩" data-src="https://i.loli.net/2019/07/05/5d1f1b9ccca3c15200.jpg"></p>
</li>
<li><p>更换硅脂后的 AIDA 64 CPU 单烤成绩</p>
<p><img alt="更换硅脂后的 AIDA 64 CPU 单烤成绩" data-src="https://i.loli.net/2019/07/05/5d1f1b699866790398.jpg"></p>
</li>
</ul>
<h2 id="屏幕"><a href="#屏幕" class="headerlink" title="屏幕"></a>屏幕</h2><p>这块 15.6 寸 1080P 60FPS 的屏幕没有什么特别出彩的点，72% NTSC 的色域对于一般人也已经完全可以满足日常的需求了，屏幕的可视角度也没有什么大问题。支持 HDR 视频播放可以让平时摸鱼看 NetFlix 的时候能更开心一些。总体而言算中规中矩。专业的客观数据测试截至目前（2019 年 7 月 5 日（CST））本人并未找到，所以这里也就不再给出了。</p>
<h2 id="可升级性"><a href="#可升级性" class="headerlink" title="可升级性"></a>可升级性</h2><p>说起笔记本，也就不得不说可升级性了。拆开 D 面后你会看到一个空闲的 M.2 PCIe x4 2280 接口和一个 DDR4 SODIMM 接口，如果你购买的是 56Wh 电池版本，还会看到一个 2.5 寸硬盘槽位。对于可升级性来讲，这款笔记本算相对友好的了。值得一提的是，笔记本自带的 NVMe SSD 所安装的槽位是 2230/2242/2280 可调节的。另外一个雷电三接口也解决了不少扩展性与后期升级方面的问题。需要注意的是，笔记本自带的无线网卡所使用的是 Intel 新提出的 <span class="exturl" data-url="aHR0cHM6Ly93d3cuaW50ZWwuY29tL2NvbnRlbnQvd3d3L3VzL2VuL3N1cHBvcnQvYXJ0aWNsZXMvMDAwMDI2MTU1L25ldHdvcmstYW5kLWktby93aXJlbGVzcy1uZXR3b3JraW5nLmh0bWw=" title="https://www.intel.com/content/www/us/en/support/articles/000026155/network-and-i-o/wireless-networking.html">CNVi 接口规范<i class="fa fa-external-link"></i></span>，让部分想更换网卡安装 Hackintosh 的玩家工程量大大加大。唯一可行的方案是使用 2230/2242/2280 可调节的接口安装网卡，但同时也需要重新考虑天线在机身内部的走线问题。</p>
<h2 id="键盘"><a href="#键盘" class="headerlink" title="键盘"></a>键盘</h2><p>这款笔记本所使用的键盘是小 Enter 小方向键布局（如 B、C 面图片所示），对于部分人来说可能需要一定的适应时间。总体而言，一旦上手，键盘的手感还是很舒服的。有小键盘的布局让一些数字处理会更轻松一些。唯一的缺点是这台电脑不支持 Windows Hello 生物信息识别。</p>
<h2 id="触控板"><a href="#触控板" class="headerlink" title="触控板"></a>触控板</h2><p>在 2019 年，Windows Precision TouchPad 基本上是笔记本标配了，加上较大的尺寸让触控板体验也是很舒服的。但对于我来说，由于触控板的位置，在平时打字时时常会出现误触的情况。虽说影响不是很大但让我感觉还是很难受。在 Windows 设置中讲触控板的灵敏度调整为低后误触情况相对改善不少。</p>
<h2 id="IO-接口"><a href="#IO-接口" class="headerlink" title="IO 接口"></a>IO 接口</h2><p>这台笔记本给了三个 Type-A 接口，让你不必成为 Dongle Man，一个雷电三接口也为未来留好了扩展性。唯一的缺点就是这台笔记本给的是 MicroSD 卡读卡器而不是 SD 卡读卡器，不过对于我来说问题不是很大。</p>
<h2 id="音响"><a href="#音响" class="headerlink" title="音响"></a>音响</h2><p>由于平时主要是使用耳机，再加上是一双木耳朵。所以这里也不做过多评价。</p>
<h2 id="一点后话"><a href="#一点后话" class="headerlink" title="一点后话"></a>一点后话</h2><p>被朋友笑称为「全都不能本」的 Dell Inspiron 7590/7591 ，反而在京东上销量火爆，基本上是一上货就被抢光的状态。也许在 6000-8000 元价位的这款笔记本，正好命中了不少人的 Sweet spot 。结合今年 Intel 在 ComputeX 所提出的 Creator laptop 这一概念，Dell Inspiron 7590/7591 可以说是 Dell 交出的一份对 Creator laptop 这一概念的答卷。相对比更高端的 10000 元价位的超极本更亲民的价格，和比同 6000-8000 元价位的竞品相对更强劲的性能，让与我一样对性能有所要求但预算受限的人有了更好的选择。在 Dell 的 Inspiron 7951 产品信息页也可以看到 Dell 是有计划推出 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGVsbC5jb20vc3VwcG9ydC9tYW51YWxzL2NuL3poL2NuYnNkMS9pbnNwaXJvbi0xNS03NTkxLWxhcHRvcC9pbnNwaXJvbi03NTkxLXNldHVwLWFuZC1zcGVjaWZpY2F0aW9ucy8lRTUlQTQlODQlRTclOTAlODYlRTUlOTklQTg/Z3VpZD1ndWlkLWJmYTUyZjQwLThhZDEtNGRmMC04ZDBmLTk0Mjc2NmJjMjExOCZsYW5nPXpoLWNu" title="https://www.dell.com/support/manuals/cn/zh/cnbsd1/inspiron-15-7591-laptop/inspiron-7591-setup-and-specifications/%E5%A4%84%E7%90%86%E5%99%A8?guid=guid-bfa52f40-8ad1-4df0-8d0f-942766bc2118&lang=zh-cn">i9 机型<i class="fa fa-external-link"></i></span> 与 <span class="exturl" data-url="aHR0cHM6Ly93d3cuZGVsbC5jb20vc3VwcG9ydC9tYW51YWxzL2NuL3poL2NuYnNkMS9pbnNwaXJvbi0xNS03NTkxLWxhcHRvcC9pbnNwaXJvbi03NTkxLXNldHVwLWFuZC1zcGVjaWZpY2F0aW9ucy8lRTYlOTglQkUlRTclQTQlQkElRTUlQjElOEY/Z3VpZD1ndWlkLWY1MDUxODNlLTNkMzgtNDgyMS04Mzc5LTE2OTJkNDcwNTIwNyZsYW5nPXpoLWNu" title="https://www.dell.com/support/manuals/cn/zh/cnbsd1/inspiron-15-7591-laptop/inspiron-7591-setup-and-specifications/%E6%98%BE%E7%A4%BA%E5%B1%8F?guid=guid-f505183e-3d38-4821-8379-1692d4705207&lang=zh-cn">4K 分辨率 aRGB 100% 色域屏幕<i class="fa fa-external-link"></i></span> 的版本。而相对更沉稳的外形也让人没有用游戏本时的那种尴尬。</p>
<p>综上，这款笔记本可能会是部分与我一样即将进入大学生活的学生和一些对性能有要求但预算又受限的创意工作者的首选。</p>
<p>本文最初发表于 Telegram 上的体验测评频道 <span class="exturl" data-url="aHR0cHM6Ly90Lm1lL3RzdUJlbmNoLzg4OA==" title="https://t.me/tsuBench/888">@tsuBench<i class="fa fa-external-link"></i></span> 并以 CC 4.0-BY-NC-SA 方式分享。</p>
<p>tsuBench © 2019</p>
]]></content>
  </entry>
  <entry>
    <title>Windows字体渲染优化</title>
    <url>/2019/03/improve-windows-font-rendering/</url>
    <content><![CDATA[<p>从2k屏的Surface book换到24寸的1080p Dell 屏，Windows 默认的字体渲染几乎不能忍。因为我很穷，买不起高分辨率的显示器，只好研究一些奇怪的方式来优化这电脑的使用体验。<a id="more"></a></p>
<h2 id="noMeiryoUI"><a href="#noMeiryoUI" class="headerlink" title="noMeiryoUI"></a>noMeiryoUI</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1RhdHN1LXN5by9ub01laXJ5b1VJLw==" title="https://github.com/Tatsu-syo/noMeiryoUI/">noMeiryoUI<i class="fa fa-external-link"></i></span> 是我第一个尝试的方案。它可以在不修改系统文件的前提下修改系统的字体。按照网上的推荐，我将字体改成了<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JlNWludmlzL1NhcmFzYS1Hb3RoaWM=" title="https://github.com/be5invis/Sarasa-Gothic">更纱黑体<i class="fa fa-external-link"></i></span>。效果还是有一点的，但是 Windows 字体最大的问题——笔画的锯齿非常明显，并没有得到改善。</p>
<h2 id="Mactype"><a href="#Mactype" class="headerlink" title="Mactype"></a>Mactype</h2><p>在沉寂了许久以后，最新的 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nub3dpZTIwMDAvbWFjdHlwZS9yZWxlYXNlcy90YWcvMjAxOC4xLWJldGE1" title="https://github.com/snowie2000/mactype/releases/tag/2018.1-beta5">MacType 2018.1-beta5<i class="fa fa-external-link"></i></span> 已经大大改善了兼容性问题。现在 Mactype 已经可以支持包括 Chrome 在内的大多数 DirectWrite 程序。</p>
<p><img alt="Snipaste_2019-03-17_21-52-33.png" data-src="https://i.loli.net/2019/03/17/5c8e515376ea6.png"></p>
<p>Mactype 的加载方式，我选择的服务加载。第一次使用的时候可以使用托盘加载，没有问题再切换成其他模式。使用托盘加载时我有时会遇到 Chrome 不加载 Mactype 的问题，不知道是不是 bug。</p>
<p>Mactype 的配置推荐 <span class="exturl" data-url="aHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vSmFtZXNpdHMvNmE1OGExYjA4ZDVjZDA5YTk0YTAyZjMwZGRhZjBlMTM=" title="https://gist.github.com/Jamesits/6a58a1b08d5cd09a94a02f30ddaf0e13">James 大佬<i class="fa fa-external-link"></i></span>的。我在他的配置上又做了一些修改。从L324到L282我全部注释了，因为加载这些进程在我这里没有遇到什么奇怪的问题，而且文件管理器毕竟还是经常要用到的。我也没有把 Chrome 中的雅黑替换成思源黑体，因为我也没有遇到奇怪的 bug。然后，在 Chrome 中用 XStyle 之类的插件加载这个 <span class="exturl" data-url="aHR0cHM6Ly91c2Vyc3R5bGVzLm9yZy9zdHlsZXMvMTU5NTQ5L3RoZW1l" title="https://userstyles.org/styles/159549/theme">CSS<i class="fa fa-external-link"></i></span>。然后，[ExcludeSub] 中加入了 origin 和 uplay 的进程，这两个程序替换字体后图标都变成了方框。</p>
<h3 id="Exclude-呢？这个配置有什么用？"><a href="#Exclude-呢？这个配置有什么用？" class="headerlink" title="[Exclude] 呢？这个配置有什么用？"></a>[Exclude] 呢？这个配置有什么用？</h3><p>答案就是没有用，作者在 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3Nub3dpZTIwMDAvbWFjdHlwZS9pc3N1ZXMvMzMyI2lzc3VlY29tbWVudC0zMTM1NzI3MDY=" title="https://github.com/snowie2000/mactype/issues/332#issuecomment-313572706">Issue<i class="fa fa-external-link"></i></span> 中解释过了。</p>
<blockquote>
<p>[Exclude] - does not exist.</p>
</blockquote>
<h3 id="许多配置不生效？"><a href="#许多配置不生效？" class="headerlink" title="许多配置不生效？"></a>许多配置不生效？</h3><p>很有可能是文件编码的问题。从 GitHub 上下载的文件默认是 UTF-8 编码，但是 Mactype 识别的是 GB 2312 编码。需要你自己用文本编辑器转换一下。</p>
<h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><p><img alt="Snipaste_2019-03-17_22-15-04.png" data-src="https://i.loli.net/2019/03/17/5c8e567035bd6.png"></p>
<p>Mactype 的渲染策略大概是，当分辨率不足以清晰的渲染字体的时候，用一团灰色的东西来渲染对应的笔画，说的简单点就是抗锯齿。对于天天看中文的人来说，不用看清每一个笔画就能看懂对应的字，而且这应该是分辨率不足的情况下最大程度模仿印刷效果的方式，比微软选择的 Hinting 好很多（大概）。</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>持续集成部署hexo</title>
    <url>/2018/12/hexo-with-travis/</url>
    <content><![CDATA[<p>过去一直在写完博客后手动生成静态文件，然后丢到服务器上。但是在多终端上不方便保持统一的体验。解决这个问题的办法是使用 Travis ci 自动编译 hexo 的静态文件，然后通过 GitHub webhook 通知服务器更新网站。<a id="more"></a></p>
<h2 id="创建-GitHub-repo"><a href="#创建-GitHub-repo" class="headerlink" title="创建 GitHub repo"></a>创建 GitHub repo</h2><p>使用 <code>git clone</code> 将 repo 下载到本地后，执行 <code>git checkout hexo</code> 创建一个 hexo 分支，然后把原来的 hexo 文件夹全部复制进来。如果你之前曾用 git clone 的方式安装过主题，建议将主题目录里的 .git 文件删除，或者改用 submodule 的方式引用主题项目（不推荐）。</p>
<h2 id="创建-Travis-ci-配置"><a href="#创建-Travis-ci-配置" class="headerlink" title="创建 Travis ci 配置"></a>创建 Travis ci 配置</h2><p>复制以下代码，<strong>修改里面有关用户名和仓库地址的信息后</strong>储存为 .travis.yml 在 repo 目录中。</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">language:</span> <span class="string">node_js</span></span><br><span class="line"><span class="attr">node_js:</span> <span class="string">stable</span></span><br><span class="line"><span class="attr">branchs:</span></span><br><span class="line"><span class="attr">  only:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">hexo</span></span><br><span class="line"><span class="attr">cache:</span></span><br><span class="line"><span class="attr">  directories:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">node_modules</span></span><br><span class="line"><span class="attr">before_install:</span></span><br><span class="line"><span class="comment"># 安装hexo-cli</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span> <span class="bullet">-g</span> <span class="string">hexo-cli</span></span><br><span class="line"><span class="attr">install:</span></span><br><span class="line"><span class="comment"># 安装依赖包</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">npm</span> <span class="string">install</span></span><br><span class="line"><span class="attr">script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">hexo</span> <span class="string">g</span></span><br><span class="line"><span class="attr">after_script:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">clone</span> <span class="attr">https://$&#123;GH_REF&#125;</span> <span class="string">.deploy_git</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cd</span> <span class="string">.deploy_git</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">checkout</span> <span class="string">master</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cd</span> <span class="string">../</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">mv</span> <span class="string">.deploy_git/.git/</span> <span class="string">./public/</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">cd</span> <span class="string">./public</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.email</span> <span class="string">"example@gmail.com"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">config</span> <span class="bullet">--global</span> <span class="string">user.name</span> <span class="string">"username"</span> </span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">add</span> <span class="string">.</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">commit</span> <span class="bullet">-m</span> <span class="string">"Travis CI Auto Builder"</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">git</span> <span class="string">push</span> <span class="bullet">--force</span> <span class="bullet">--quiet</span> <span class="string">"https://$&#123;GH_TOKEN&#125;@$&#123;GH_REF&#125;"</span> <span class="attr">master:master</span></span><br><span class="line"><span class="attr">env:</span></span><br><span class="line"><span class="attr">    global:</span></span><br><span class="line"><span class="attr">        - GH_REF:</span> <span class="string">github.com/username/username.github.io.git</span></span><br></pre></td></tr></table></figure>

<p>GH_TOKEN 需要加密后储存在配置文件中，打开 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3NldHRpbmdzL3Rva2Vucy9uZXc=" title="https://github.com/settings/tokens/new">Github设置<i class="fa fa-external-link"></i></span> 创建一个新的 token，按下图配置权限即可：<img alt="token" data-src="https://i.loli.net/2018/12/20/5c1b939e53817.png"></p>
<p>然后，在安装好 ruby 的环境下，进入到 repo 的目录执行下面的命令，就能把 token 加密后添加到 Travis 配置中。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gem install travis</span><br><span class="line">travis login</span><br><span class="line"><span class="comment"># 交互式完成登陆</span></span><br><span class="line">travis encrypt <span class="string">'GH_TOKEN=&lt; 这里填入你生成的 Token &gt;'</span> --add</span><br></pre></td></tr></table></figure>

<p>在 Linux 环境下，通过包管理器就能安装 ruby，具体步骤请查看<span class="exturl" data-url="aHR0cHM6Ly93d3cucnVieS1sYW5nLm9yZy96aF9jbi9kb2N1bWVudGF0aW9uL2luc3RhbGxhdGlvbi8=" title="https://www.ruby-lang.org/zh_cn/documentation/installation/">官方文档<i class="fa fa-external-link"></i></span>。</p>
<h2 id="启用-Travis-ci"><a href="#启用-Travis-ci" class="headerlink" title="启用 Travis ci"></a>启用 Travis ci</h2><p>在 <span class="exturl" data-url="aHR0cHM6Ly90cmF2aXMtY2kub3JnLw==" title="https://travis-ci.org/">Travis ci 官网<i class="fa fa-external-link"></i></span>用自己的 GitHub 账户登陆，然后选择你网站的 repo，编译应该会自动开始。一切正常的话，编译结束后你 repo master 分支已经部署好了网站的静态文件。整个编译的日志都会被记录下来。常见问题的解决方法：</p>
<h3 id="需要通过包管理器安装其他依赖"><a href="#需要通过包管理器安装其他依赖" class="headerlink" title="需要通过包管理器安装其他依赖"></a>需要通过包管理器安装其他依赖</h3><p>在<code>npm install</code>上添加两行：</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="bullet">-</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">update</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">sudo</span> <span class="string">apt-get</span> <span class="string">install</span> <span class="bullet">-y</span> <span class="string">package</span></span><br></pre></td></tr></table></figure>

<p><code>sudo</code> 和 <code>apt-get update</code> 都是必须的</p>
<h2 id="接收-webhook"><a href="#接收-webhook" class="headerlink" title="接收 webhook"></a>接收 webhook</h2><p>新建一个文件夹保存 webhook.js 和 deploy.sh，在这个文件夹下执行 <code>npm install github-webhook-handler</code>。将以下代码保存到 webhook.js：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>)</span><br><span class="line"><span class="keyword">var</span> createHandler = <span class="built_in">require</span>(<span class="string">'github-webhook-handler'</span>)</span><br><span class="line"><span class="keyword">var</span> handler = createHandler(&#123;</span><br><span class="line">	path: <span class="string">'/deploy'</span>,</span><br><span class="line">	secret: <span class="string">'token'</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 上面的 secret 保持和 GitHub 后台设置的一致</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">run_cmd</span>(<span class="params">cmd, args, callback</span>) </span>&#123;</span><br><span class="line">	<span class="keyword">var</span> spawn = <span class="built_in">require</span>(<span class="string">'child_process'</span>).spawn;</span><br><span class="line">	<span class="keyword">var</span> child = spawn(cmd, args);</span><br><span class="line">	<span class="keyword">var</span> resp = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">	child.stdout.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">buffer</span>) </span>&#123;</span><br><span class="line">		resp += buffer.toString();</span><br><span class="line">	&#125;);</span><br><span class="line">	child.stdout.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">		callback(resp)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span>(<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">	handler(req, res, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">		res.statusCode = <span class="number">404</span></span><br><span class="line">		res.end(<span class="string">'no such location'</span>)</span><br><span class="line">	&#125;)</span><br><span class="line">&#125;).listen(<span class="number">7777</span>)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'error'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.error(<span class="string">'Error:'</span>, err.message)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">handler.on(<span class="string">'push'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</span><br><span class="line">	<span class="built_in">console</span>.log(<span class="string">'Received a push event for %s to %s'</span>,</span><br><span class="line">		event.payload.repository.name,</span><br><span class="line">		event.payload.ref);</span><br><span class="line">	run_cmd(<span class="string">'sh'</span>, [<span class="string">'./deploy.sh'</span>, event.payload.repository.name], <span class="function"><span class="keyword">function</span>(<span class="params">text</span>) </span>&#123;</span><br><span class="line">		<span class="built_in">console</span>.log(text)</span><br><span class="line">	&#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>将以下代码保存到 deploy.sh：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"></span><br><span class="line">WEB_PATH=<span class="string">'/var/www/'</span><span class="variable">$1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$WEB_PATH</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">"pulling source code at <span class="variable">$WEB_PATH</span>..."</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure>

<p>假设网站目录在 /var/www/ 下，以 repo 名命名。然后执行 :</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br><span class="line">pm2 start webhook.js</span><br></pre></td></tr></table></figure>

<p> 安装 pm2 来保持 webhook 运行。然后在 nginx 的站点配置文件中添加：</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">location</span> /deploy &#123;</span><br><span class="line">	<span class="attribute">proxy_pass</span> http://127.0.0.1:7777;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>重载 nginx，然后提前从 GitHub clone 下网站文件到相应的目录。</p>
<h2 id="添加-webhook"><a href="#添加-webhook" class="headerlink" title="添加 webhook"></a>添加 webhook</h2><p>打开 repo 的 settings-webhooks，点击 add webhook，按下图配置：<br><img alt="webhook" data-src="https://i.loli.net/2018/12/20/5c1b9a248b403.png"><br>secret 要和 webhook.js 中的相同。添加以后，如果 request 正确的返回了 200，网站应该自动更新完毕了。</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>本博客的Nginx优化编译方案</title>
    <url>/2018/10/nginx-configuration/</url>
    <content><![CDATA[<p>在编译的过程中，参考了 <span class="exturl" data-url="aHR0cHM6Ly9pbXF1cXUuY29tL3Bvc3QvZW5hYmxlLXRscy0xLTMuaHRtbA==" title="https://imququ.com/post/enable-tls-1-3.html">imququ<i class="fa fa-external-link"></i></span> 等大佬的资料，在最新的 mainline Nginx 之上添加了 ngx_brotli 模块并使用最新的 OpenSSL 编译。<a id="more"></a></p>
<h2 id="编译-Nginx"><a href="#编译-Nginx" class="headerlink" title="编译 Nginx"></a>编译 Nginx</h2><p>我服务器的环境是  debian 9，在编译前先安装依赖。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install build-essential libpcre3 libpcre3-dev zlib1g-dev unzip git</span><br></pre></td></tr></table></figure>

<p>然后下载并解压 Nginx 和其他模块</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Nginx</span></span><br><span class="line">wget -c http://nginx.org/download/nginx-1.15.6.tar.gz</span><br><span class="line">tar zxf nginx-1.15.6.tar.gz</span><br><span class="line"><span class="comment"># OpenSSL</span></span><br><span class="line">wget -c  https://github.com/openssl/openssl/archive/OpenSSL_1_1_1.tar.gz</span><br><span class="line">tar xzf OpenSSL_1_1_1.tar.gz</span><br><span class="line">mv openssl-OpenSSL_1_1_1 openssl</span><br><span class="line"><span class="comment"># ngx_brotli</span></span><br><span class="line">git <span class="built_in">clone</span> https://github.com/google/ngx_brotli.git</span><br><span class="line"><span class="built_in">cd</span> ngx_brotli</span><br><span class="line">git submodule update --init</span><br><span class="line"><span class="built_in">cd</span> ../</span><br></pre></td></tr></table></figure>

<p>开始编译</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nginx-1.15.6</span><br><span class="line">./configure --add-module=../ngx_brotli --with-openssl=../openssl --with-openssl-opt='enable-tls1_3' --with-http_v2_module --with-http_ssl_module --with-http_gzip_static_module</span><br><span class="line">make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure>

<p>如果需要升级 Nginx ，不要执行 <code>sudo make install</code> ，执行下面的命令。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp /usr/local/nginx/sbin/nginx /usr/local/nginx/sbin/nginx.old</span><br><span class="line"><span class="meta">#</span><span class="bash"> 备份 Nginx</span></span><br><span class="line">cp -f objs/nginx /usr/local/nginx/sbin/nginx</span><br><span class="line">nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解决上一条命令出现的问题后继续</span></span><br><span class="line">make upgrade</span><br></pre></td></tr></table></figure>

<h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>安装后 Nginx 和配置在 <code>/usr/local/nginx/</code> 下面。首先打开 <code>conf/nginx.conf</code></p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">sendfile</span>        <span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nopush</span>     	<span class="literal">on</span>;</span><br><span class="line"><span class="attribute">tcp_nodelay</span>    	<span class="literal">on</span>;</span><br></pre></td></tr></table></figure>

<p>这三行，原来注释掉的改成 on 。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">gzip</span>			<span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_vary</span>     	<span class="literal">on</span>;</span><br><span class="line"><span class="attribute">gzip_comp_level</span>	<span class="number">6</span>;</span><br><span class="line"><span class="attribute">gzip_buffers</span>   	<span class="number">16</span> <span class="number">8k</span>;</span><br><span class="line"><span class="attribute">gzip_min_length</span>	<span class="number">1000</span>;</span><br><span class="line"><span class="attribute">gzip_proxied</span>   	any;</span><br><span class="line"><span class="attribute">gzip_disable</span>   	<span class="string">"msie6"</span>;</span><br><span class="line"><span class="attribute">gzip_http_version</span>	<span class="number">1</span>.<span class="number">0</span>;</span><br><span class="line"><span class="attribute">gzip_types</span>    	text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;</span><br><span class="line">    </span><br><span class="line"><span class="attribute">brotli</span>			<span class="literal">on</span>;</span><br><span class="line"><span class="attribute">brotli_comp_level</span>	<span class="number">6</span>;</span><br><span class="line"><span class="attribute">brotli_types</span>	text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/javascript image/svg+xml;</span><br></pre></td></tr></table></figure>

<p>启用 gzip 和 brotli 压缩。然后创建一个网站的配置。</p>
<figure class="highlight nginx"><table><tr><td class="code"><pre><span class="line"><span class="attribute">ssl_protocols</span>	TLSv1.<span class="number">3</span> TLSv1.<span class="number">2</span>;</span><br><span class="line"><span class="attribute">ssl_ciphers</span>		TLS13-AES-<span class="number">256</span>-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-<span class="number">128</span>-GCM-SHA256:TLS13-AES-<span class="number">128</span>-CCM-<span class="number">8</span>-SHA256:TLS13-AES-<span class="number">128</span>-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH;</span><br><span class="line"><span class="attribute">add_header</span>		Strict-Transport-Security <span class="string">"max-age=63072000; includeSubDomains; preload"</span>;</span><br><span class="line"><span class="attribute">add_header</span>		X-Frame-Options deny;</span><br><span class="line"><span class="attribute">add_header</span>		X-Content-Type-Options nosniff;</span><br></pre></td></tr></table></figure>

<p>重点就是加密算法的选择和 HSTS 。</p>
<h2 id="其他的优化"><a href="#其他的优化" class="headerlink" title="其他的优化"></a>其他的优化</h2><p>博客的所有文件都会用 service worker 永久缓存在读者的电脑上。直接安装 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3pvdW1pYW9qaWFuZy9oZXhvLXNlcnZpY2Utd29ya2Vy" title="https://github.com/zoumiaojiang/hexo-service-worker">hexo-service-worker<i class="fa fa-external-link"></i></span> 插件即可。</p>
<p>博客的图片放在 <span class="exturl" data-url="aHR0cHM6Ly9zbS5tcy8=" title="https://sm.ms/">sm.ms<i class="fa fa-external-link"></i></span> 图床上，然后使用 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL1JvYmluLWZyb250L2hleG8tbGF6eWxvYWQ=" title="https://github.com/Robin-front/hexo-lazyload">hexo-lazyload<i class="fa fa-external-link"></i></span> 制作加载时的缩略图。放上一张首次加载首页的耗时图。<img alt="加载图" data-src="https://i.loli.net/2018/11/11/5be7d80a4ef45.png"></p>
]]></content>
  </entry>
  <entry>
    <title>使用transmission在linux上搭建pt下载环境</title>
    <url>/2018/05/transmission-in-linux/</url>
    <content><![CDATA[<p>现在在linux服务器上部署的pt下载器主要是aria2， transmission和rtorrent，然而aria2要下载pt的话还需要伪装客户端，rtorrent的webui太丑加载速度还很慢，于是最后选择了transmission。博客中提到的服务器的配置为Intel Atom N2800 2c/4 t 1.86GHz，4Gb DDR3 1066，2T HDD， 位于欧洲，不抗投诉。<a id="more"></a></p>
<h2 id="安装transmission与deamon"><a href="#安装transmission与deamon" class="headerlink" title="安装transmission与deamon"></a>安装transmission与deamon</h2><p>服务器的系统环境是debian9，所以可以很方便用包管理器安装需要的软件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt -y install transmission transmission-deamon</span><br><span class="line">systemctl enable transmission-deamon</span><br></pre></td></tr></table></figure>

<p>好像没有什么特别的配置要配置的，反正webui里都可以改</p>
<h2 id="安装修改版的transmission-webui"><a href="#安装修改版的transmission-webui" class="headerlink" title="安装修改版的transmission webui"></a>安装修改版的transmission webui</h2><p><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3JvbmdnYW5nL3RyYW5zbWlzc2lvbi13ZWItY29udHJvbA==" title="https://github.com/ronggang/transmission-web-control">项目地址<i class="fa fa-external-link"></i></span>，安装过程也是全自动的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget https://github.com/ronggang/transmission-web-control/raw/master/release/install-tr-control.sh</span><br><span class="line">bash install-tr-control.sh</span><br></pre></td></tr></table></figure>

<p>接下来输入1然后按回车就可以了<br>然后重启下transmission</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart transmission-deamon</span><br></pre></td></tr></table></figure>

<h2 id="安装-transmission-rss"><a href="#安装-transmission-rss" class="headerlink" title="安装 transmission-rss"></a>安装 transmission-rss</h2><h2 id="使用nginx-反代webui"><a href="#使用nginx-反代webui" class="headerlink" title="使用nginx 反代webui"></a>使用nginx 反代webui</h2><p>transmission的webui没有ssl也没法加密码，所以用nginx反代下，性能更高。我安装的nginx是来自<span class="exturl" data-url="aHR0cHM6Ly9zYi5zYi9ibG9nL2RlYmlhbi1pbnN0YWxsLW5naW54LXBocC1teXNxbC8=" title="https://sb.sb/blog/debian-install-nginx-php-mysql/">烧饼博客上的教程<i class="fa fa-external-link"></i></span>，下面是配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">listen 80 default_server;</span><br><span class="line">listen [::]:80 default_server;</span><br><span class="line">server_name example.com;</span><br><span class="line"></span><br><span class="line">location /.well-known/acme-challenge &#123;</span><br><span class="line">root /var/www/letsencrypt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">return 301 https://$host$request_uri;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line">listen 443 ssl http2 default_server;</span><br><span class="line">listen [::]:443 ssl http2 default_server;</span><br><span class="line"></span><br><span class="line">server_name example.com;</span><br><span class="line">client_max_body_size 10m;</span><br><span class="line">server_tokens off;</span><br><span class="line"></span><br><span class="line">root /var/www/rutorrent;</span><br><span class="line">index index.html index.htm index.php;</span><br><span class="line"></span><br><span class="line">ssl_dhparam /etc/nginx/ssl/dhparam.pem;</span><br><span class="line"></span><br><span class="line">ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">ssl_ciphers &apos;ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-RSA-AES256-SHA256:DHE-RSA-AES256-SHA:ECDHE-ECDSA-DES-CBC3-SHA:ECDHE-RSA-DES-CBC3-SHA:EDH-RSA-DES-CBC3-SHA:AES128-GCM-SHA256:AES256-GCM-SHA384:AES128-SHA256:AES256-SHA256:AES128-SHA:AES256-SHA:DES-CBC3-SHA:!DSS&apos;;</span><br><span class="line">ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">ssl_session_cache shared:SSL:50m;</span><br><span class="line">ssl_session_timeout 1d;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ssl_certificate /etc/nginx/ssl/fullchain.cer;</span><br><span class="line">ssl_certificate_key /etc/nginx/ssl/dl.key;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add_header Strict-Transport-Security &quot;max-age=63072000; includeSubDomains; preload&quot;;</span><br><span class="line">add_header X-Frame-Options SAMEORIGIN;</span><br><span class="line">add_header X-Content-Type-Options nosniff;</span><br><span class="line">add_header X-XSS-Protection &quot;1; mode=block&quot;;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">auth_basic &quot;Restricted&quot;;</span><br><span class="line">auth_basic_user_file /etc/nginx/passwd;</span><br><span class="line">proxy_pass  http://127.0.0.1:9091;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~ \.php$ &#123;</span><br><span class="line">fastcgi_pass unix:/run/php/php7.2-fpm.sock;</span><br><span class="line">include snippets/fastcgi-php.conf;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">access_log /var/log/nginx/rutorrent.access.log;</span><br><span class="line">error_log /var/log/nginx/rutorrent.error.log;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>其中，<code>/etc/nginx/passwd</code>的生成方法是<code>printf &quot;user:$(openssl passwd -crypt password)\n&quot; &gt;&gt; /etc/nginx/passwd</code>。</p>
<h2 id="最后的效果"><a href="#最后的效果" class="headerlink" title="最后的效果"></a>最后的效果</h2><p><img alt="1540133454051" data-src="https://i.loli.net/2018/10/22/5bcda5ea4387b.jpg"></p>
<p>真香</p>
]]></content>
      <tags>
        <tag>技术</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/05/hello-world/</url>
    <content><![CDATA[<p>在咕咕咕了很久很久以后，这个破博客又上线了。以前的文章什么都没有了，反正也没几篇。以后写的bug都会放在这里</p>
<p>2018年5月13日</p>
]]></content>
  </entry>
</search>
